#!/usr/bin/env bash

#BSUB -J segregate[1-2]
#BSUB -e log.gen_plot.%J.%I.err
#BSUB -o log.gen_plot.%J.%I.out
#BSUB -q normal

# Split bam file into separate bams based on the length of the aligned read
# Take the stack of bam files generated by the script and generate bedgraphs using bedtools

# Input is 1 bam file
# Output is genomedata archive

set -o nounset -o pipefail -o errexit

SRC_DIR='/vol3/home/elijah/dev/rotations/frameshifting/pipeline'
args=$(getopt -l "strand:sample:input_file:output_file" -o "s:a:i:o:h" -- "$@")

eval set -- "$args"

while [ $# -ge 1 ]; do
    case "$1" in
        --)
        # No more options left.
        shift
        break
        ;;
        -a|--sample)
        sample="$2"
        shift
        ;;
        -i|--input_file)
        input_file="$2"
        shift
        ;;
        -o|--output_file)
        output_file="$2"
        shift
        ;;
        -s|--strand)
        strand="$2"
        shift
        ;;
        -h)
        echo "Display some help"
        exit 0
        ;;
    esac
    shift
done

GENOME_CHROM_SIZES="/vol3/home/elijah/ref/genomes/sacCer1/sacCer1.chrom.sizes"
# bamfile=$input_file
# echo " segreating $bamfile"
# $SRC_DIR/./split_by_read_length.py $bamfile 

if [[ ! -d "./bedgraphs/$sample/by_read_len" ]]; then
   mkdir -p "./bedgraphs/$sample/by_read_len"
fi

strands=('pos' 'neg' 'both')
strand_args=('-strand +' '-strand -' '')
for strand_idx in "${!strands[@]}"; do

    strand_name=${strands[$strand_idx]}
    strand_arg=${strand_args[$strand_idx]}

    split_bams=$(find "alignments/$sample/seg_by_align_size" -name "*.bam" | sort)
    for f in ${split_bams[@]}; do
        echo "calculating genomecov for:"
        echo "- $f"
        name=$(basename $f ".all.bam")
        bedtools genomecov $strand_arg -bg -5 -ibam $f -g $GENOME_CHROM_SIZES \
            | gzip -c \
            > ./bedgraphs/$sample/by_read_len/$name.$strand_name.bg.gz
    done
done

GENOME=$HOME/ref/genomes/sacCer1/sacCer1.fa
pos_bgs=$(find "bedgraphs/$sample/by_read_len" -name "*pos.bg.gz" | sort)
neg_bgs=$(find "bedgraphs/$sample/by_read_len" -name "*neg.bg.gz" | sort)
bgs=
case $strand in
    pos)
    bgs=pos_bgs
    ;;
    neg)
    bgs=neg_bgs
    ;;
    seg) 
    idx=0
    for i in "${!pos_bgs[@]}"; do
        bgs[idx]=${pos_bgs[$i]}
        idx=$(expr $idx + 1)
        bgs[idx]=${neg_bgs[$i]}
        idx=$(expr $idx + 1)
    done
    ;;
esac

declare -p bgs

trackspec=""
for f in ${bgs[@]}; do
    trackname=$(basename $f '.bg.gz')
    new_track="-t $sample.$trackname=$f "
    trackspec=$trackspec$new_track
done

echo $trackspec
genomedata-load --verbose $trackspec -s $GENOME $output_file
